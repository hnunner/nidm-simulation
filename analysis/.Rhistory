source('~/git/uu/nidm/simulation/analysis/analysis.R')
ssData <- loadSimulationSummaryData()
summary(ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
ssData <- loadSimulationSummaryData()
summary(ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
ssData <- loadSimulationSummaryData()
summary(ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
source('~/git/uu/nidm/simulation/analysis/analysis.R')
ssData <- loadSimulationSummaryData()
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
ssData <- loadSimulationSummaryData()
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
ssData <- loadSimulationSummaryData()
exportRegressionModelsComplete(ssData = ssData)
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
ssData <- loadSimulationSummaryData()
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete(ssData = ssData)
# MAIN EFFECTS
# Cidm parameters
beta                               <- meanCenter(ssData$net.param.beta)
mu                                 <- meanCenter(ssData$dis.param.mu)
sigma                              <- meanCenter(ssData$dis.param.s / 50)
r                                  <- meanCenter(ssData$net.param.r)
N                                  <- meanCenter(ssData$net.param.N / 50)
iota                               <- meanCenter(ssData$net.param.net.empty)
# network properties
density                            <- meanCenter(ssData$net.prop.density.pre.epidemic)
indexdegree                        <- meanCenter(ssData$act.prop.net.degree.order.1 / (ssData$net.param.N-1))
# INTERACTION EFFECTS
# combinations of beta
betaXmu                            <- (beta - mean(beta)                       *  (mu - mean(mu)))
betaXsigma                         <- (beta - mean(beta)                       *  (sigma - mean(sigma)))
betaXr                             <- (beta - mean(beta)                       *  (r - mean(r)))
betaXN                             <- (beta - mean(beta)                       *  (N - mean(N)))
betaXiota                          <- (beta - mean(beta)                       *  (iota - mean(iota)))
betaXdensity                       <- (beta - mean(beta)                       *  (density - mean(density)))
betaXindexdegree                   <- (beta - mean(beta)                       *  (indexdegree - mean(indexdegree)))
# combinations of mu
muXsigma                           <- (mu - mean(mu)                           *  (sigma - mean(sigma)))
muXr                               <- (mu - mean(mu)                           *  (r - mean(r)))
muXN                               <- (mu - mean(mu)                           *  (N - mean(N)))
muXiota                            <- (mu - mean(mu)                           *  (iota - mean(iota)))
muXdensity                         <- (mu - mean(mu)                           *  (density - mean(density)))
muXindexdegree                     <- (mu - mean(mu)                           *  (indexdegree - mean(indexdegree)))
# combinations of sigma
sigmaXr                            <- (sigma - mean(sigma)                     *  (r - mean(r)))
sigmaXN                            <- (sigma - mean(sigma)                     *  (N - mean(N)))
sigmaXiota                         <- (sigma - mean(sigma)                     *  (iota - mean(iota)))
sigmaXdensity                      <- (sigma - mean(sigma)                     *  (density - mean(density)))
sigmaXindexdegree                  <- (sigma - mean(sigma)                     *  (indexdegree - mean(indexdegree)))
# combinations of r
rXN                                <- (r - mean(r)                             *  (N - mean(N)))
rXiota                             <- (r - mean(r)                             *  (iota - mean(iota)))
rXdensity                          <- (r - mean(r)                             *  (density - mean(density)))
rXindexdegree                      <- (r - mean(r)                             *  (indexdegree - mean(indexdegree)))
# combinations of N
NXiota                             <- (N - mean(N)                             *  (iota - mean(iota)))
NXdensity                          <- (N - mean(N)                             *  (density - mean(density)))
NXindexdegree                      <- (N - mean(N)                             *  (indexdegree - mean(indexdegree)))
# combinations of iota
iotaXdensity                       <- (iota - mean(iota)                       *  (density - mean(density)))
iotaXindexdegree                   <- (iota - mean(iota)                       *  (indexdegree - mean(indexdegree)))
# combinations of density
densityXindexdegree                <- (density - mean(density)                 *  (indexdegree - mean(indexdegree)))
# MAIN EFFECTS
# CIDMo parameters
beta  <- meanCenter(ssData$net.param.beta)
mu    <- meanCenter(ssData$dis.param.mu)
summary(sigma)
sigma <- meanCenter(ssData$dis.param.s / 50)
summary(sigma)
r     <- meanCenter(ssData$net.param.r)
summary(N)
N     <- meanCenter(ssData$net.param.N / 50)
summary(N)
iota  <- meanCenter(ssData$net.param.net.empty)
iota2                               <- meanCenter(ssData$net.param.net.empty)
# network properties
deg1  <- meanCenter(ssData$act.prop.net.degree.order.1 / (ssData$net.param.N-1))
dens  <- meanCenter(ssData$net.prop.density.pre.epidemic)
summary(dens)
summary(density)
# INTERACTION EFFECTS
intBetaMu     <- (beta - mean(beta))    *   (mu - mean(mu))
intBetaSigma  <- (beta - mean(beta))    *   (sigma - mean(sigma))
intBetaR      <- (beta - mean(beta))    *   (r - mean(r))
intBetaN      <- (beta - mean(beta))    *   (N - mean(N))
intBetaIota   <- (beta - mean(beta))    *   (iota - mean(iota))
intBetaDens   <- (beta - mean(beta))    *   (dens - mean(dens))
intBetaDeg1   <- (beta - mean(beta))    *   (deg1 - mean(deg1))
# combinations of mu
intMuSigma    <- (mu - mean(mu))        *   (sigma - mean(sigma))
intMuR        <- (mu - mean(mu))        *   (r - mean(r))
intMuN        <- (mu - mean(mu))        *   (N - mean(N))
intMuIota     <- (mu - mean(mu))        *   (iota - mean(iota))
intMuDens     <- (mu - mean(mu))        *   (dens - mean(dens))
intMuDeg1     <- (mu - mean(mu))        *   (deg1 - mean(deg1))
# combinations of sigma
intSigmaR     <- (sigma - mean(sigma))  *   (r - mean(r))
intSigmaN     <- (sigma - mean(sigma))  *   (N - mean(N))
intSigmaIota  <- (sigma - mean(sigma))  *   (iota - mean(iota))
intSigmaDens  <- (sigma - mean(sigma))  *   (dens - mean(dens))
intSigmaDeg1  <- (sigma - mean(sigma))  *   (deg1 - mean(deg1))
# combinations of r
intRN         <- (r - mean(r))          *   (N - mean(N))
intRIota      <- (r - mean(r))          *   (iota - mean(iota))
intRDens      <- (r - mean(r))          *   (dens - mean(dens))
intRDeg1      <- (r - mean(r))          *   (deg1 - mean(deg1))
# combinations of N
intNIota      <- (N - mean(N))          *   (iota - mean(iota))
intNDens      <- (N - mean(N))          *   (dens - mean(dens))
intNDeg1      <- (N - mean(N))          *   (deg1 - mean(deg1))
# combinations of iota
intIotaDens   <- (iota - mean(iota))    *   (dens - mean(dens))
intIotaDeg1   <- (iota - mean(iota))    *   (deg1 - mean(deg1))
# combinations of density
intDensDeg1   <- (dens - mean(dens))  *   (deg1 - mean(deg1))
### 2-LEVEL LINEAR REGRESSIONS (duration)  ###
### level 2: parameters combination             ###
### level 1: simulation runs                    ###
# null-model
reg00    <- lmer(ssData$dis.prop.duration ~
1 +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# main effects: varied CIDM parameters
reg1Main <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# network properties
reg2Main <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# interaction effects
reg2Int  <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
#  interactions
betaXmu +
#betaXsigma +
#betaXr +
betaXN +
#betaXiota +
#betaXdensity +
#betaXindexdegree +
#muXsigma +
#muXr +
#muXN +
#muXiota +
muXdensity +
#muXindexdegree +
sigmaXr +
sigmaXN +
#sigmaXiota +
#sigmaXdensity +
#sigmaXindexdegree +
rXN +
#rXiota +
#sigmaXdensity +
#rXindexdegree +
#NXiota +
NXdensity +
#NXindexdegree +
#iotaXdensity +
#iotaXindexdegree +
#densityXindexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# interaction effects
reg2Int  <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
#  interactions
intBetaMu +
#betaXsigma +
#betaXr +
intBetaN +
#betaXiota +
#betaXdensity +
#betaXindexdegree +
#muXsigma +
#muXr +
#muXN +
#muXiota +
intMuDens +
#muXindexdegree +
intSigmaR +
intSigmaN +
#sigmaXiota +
#sigmaXdensity +
#sigmaXindexdegree +
intRN +
#rXiota +
#sigmaXdensity +
#rXindexdegree +
#NXiota +
intNDens +
#NXindexdegree +
#iotaXdensity +
#iotaXindexdegree +
#densityXindexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
intBetaMu <- betaXmu
intBetaN <- betaXN
intMuDens <- muXdensity
intSigmaR <- sigmaXr
intSigmaN <- sigmaXN
intRN <- rXN
intNDens <- NXdensity
# interaction effects
reg2Int  <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
#  interactions
intBetaMu +
#betaXsigma +
#betaXr +
intBetaN +
#betaXiota +
#betaXdensity +
#betaXindexdegree +
#muXsigma +
#muXr +
#muXN +
#muXiota +
intMuDens +
#muXindexdegree +
intSigmaR +
intSigmaN +
#sigmaXiota +
#sigmaXdensity +
#sigmaXindexdegree +
intRN +
#rXiota +
#sigmaXdensity +
#rXindexdegree +
#NXiota +
intNDens +
#NXindexdegree +
#iotaXdensity +
#iotaXindexdegree +
#densityXindexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# MAIN EFFECTS
# Cidm parameters
beta                               <- meanCenter(ssData$net.param.beta)
mu                                 <- meanCenter(ssData$dis.param.mu)
sigma                              <- meanCenter(ssData$dis.param.s / 50)
r                                  <- meanCenter(ssData$net.param.r)
N                                  <- meanCenter(ssData$net.param.N / 50)
iota                               <- meanCenter(ssData$net.param.net.empty)
# network properties
density                            <- meanCenter(ssData$net.prop.density.pre.epidemic)
indexdegree                        <- meanCenter(ssData$act.prop.net.degree.order.1 / (ssData$net.param.N-1))
# INTERACTION EFFECTS
# combinations of beta
intBetaMu                          <- (beta - mean(beta))    *   (mu - mean(mu))
betaXmu                            <- (beta - mean(beta)                       *  (mu - mean(mu)))
betaXsigma                         <- (beta - mean(beta)                       *  (sigma - mean(sigma)))
betaXr                             <- (beta - mean(beta)                       *  (r - mean(r)))
intBetaN                           <- (beta - mean(beta))    *   (N - mean(N))
betaXN                             <- (beta - mean(beta)                       *  (N - mean(N)))
betaXiota                          <- (beta - mean(beta)                       *  (iota - mean(iota)))
betaXdensity                       <- (beta - mean(beta)                       *  (density - mean(density)))
betaXindexdegree                   <- (beta - mean(beta)                       *  (indexdegree - mean(indexdegree)))
# combinations of mu
muXsigma                           <- (mu - mean(mu)                           *  (sigma - mean(sigma)))
muXr                               <- (mu - mean(mu)                           *  (r - mean(r)))
muXN                               <- (mu - mean(mu)                           *  (N - mean(N)))
muXiota                            <- (mu - mean(mu)                           *  (iota - mean(iota)))
intMuDens                          <- (mu - mean(mu))        *   (density - mean(density))
muXdensity                         <- (mu - mean(mu)                           *  (density - mean(density)))
muXindexdegree                     <- (mu - mean(mu)                           *  (indexdegree - mean(indexdegree)))
# combinations of sigma
intSigmaR                          <- (sigma - mean(sigma))  *   (r - mean(r))
sigmaXr                            <- (sigma - mean(sigma)                     *  (r - mean(r)))
intSigmaN                          <- (sigma - mean(sigma))  *   (N - mean(N))
sigmaXN                            <- (sigma - mean(sigma)                     *  (N - mean(N)))
sigmaXiota                         <- (sigma - mean(sigma)                     *  (iota - mean(iota)))
sigmaXdensity                      <- (sigma - mean(sigma)                     *  (density - mean(density)))
sigmaXindexdegree                  <- (sigma - mean(sigma)                     *  (indexdegree - mean(indexdegree)))
# combinations of r
intRN                              <- (r - mean(r))          *   (N - mean(N))
rXN                                <- (r - mean(r)                             *  (N - mean(N)))
rXiota                             <- (r - mean(r)                             *  (iota - mean(iota)))
rXdensity                          <- (r - mean(r)                             *  (density - mean(density)))
rXindexdegree                      <- (r - mean(r)                             *  (indexdegree - mean(indexdegree)))
# combinations of N
NXiota                             <- (N - mean(N)                             *  (iota - mean(iota)))
intNDens                           <- (N - mean(N))          *   (dens - mean(dens))
NXdensity                          <- (N - mean(N)                             *  (density - mean(density)))
NXindexdegree                      <- (N - mean(N)                             *  (indexdegree - mean(indexdegree)))
# combinations of iota
iotaXdensity                       <- (iota - mean(iota)                       *  (density - mean(density)))
iotaXindexdegree                   <- (iota - mean(iota)                       *  (indexdegree - mean(indexdegree)))
# combinations of density
densityXindexdegree                <- (density - mean(density)                 *  (indexdegree - mean(indexdegree)))
### 2-LEVEL LINEAR REGRESSIONS (duration)  ###
### level 2: parameters combination             ###
### level 1: simulation runs                    ###
# null-model
reg00    <- lmer(ssData$dis.prop.duration ~
1 +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# main effects: varied CIDM parameters
reg1Main <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# network properties
reg2Main <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# interaction effects
reg2Int  <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
#  interactions
intBetaMu +
#betaXsigma +
#betaXr +
intBetaN +
#betaXiota +
#betaXdensity +
#betaXindexdegree +
#muXsigma +
#muXr +
#muXN +
#muXiota +
intMuDens +
#muXindexdegree +
intSigmaR +
intSigmaN +
#sigmaXiota +
#sigmaXdensity +
#sigmaXindexdegree +
intRN +
#rXiota +
#sigmaXdensity +
#rXindexdegree +
#NXiota +
intNDens +
#NXindexdegree +
#iotaXdensity +
#iotaXindexdegree +
#densityXindexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
# interaction effects
reg2Int  <- lmer(ssData$dis.prop.duration ~
#  model parameters
beta +
mu +
sigma +
r +
N +
#iota +
#  network properties
density +
indexdegree +
#  interactions
#intBetaMu +
betaXmu +
#betaXsigma +
#betaXr +
#intBetaN +
betaXN +
#betaXiota +
#betaXdensity +
#betaXindexdegree +
#muXsigma +
#muXr +
#muXN +
#muXiota +
#intMuDens +
muXdensity +
#muXindexdegree +
#intSigmaR +
sigmaXr +
#intSigmaN +
sigmaXN +
#sigmaXiota +
#sigmaXdensity +
#sigmaXindexdegree +
#intRN +
rXN +
#rXiota +
#sigmaXdensity +
#rXindexdegree +
#NXiota +
#intNDens +
NXdensity +
#NXindexdegree +
#iotaXdensity +
#iotaXindexdegree +
#densityXindexdegree +
(1 | sim.param.upc),
data = ssData,
REML = FALSE)
summary(intBetaMu)
summary(betaXmu)
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete()
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete()
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete()
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete()
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportAll()
source('~/git/uu/nidm/simulation/analysis/analysis.R')
exportRegressionModelsComplete()
